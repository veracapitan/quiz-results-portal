'use client'
import { QueryObserver } from '@tanstack/query-core'
import { useBaseQuery } from './useBaseQuery'
<<<<<<< HEAD
import type {
  DefaultError,
  NoInfer,
  QueryClient,
  QueryKey,
} from '@tanstack/query-core'
=======
import type { DefaultError, QueryClient, QueryKey } from '@tanstack/query-core'
>>>>>>> 3b008e380491e6ba2d199016330fcd7fa128de4c
import type {
  DefinedUseQueryResult,
  UseQueryOptions,
  UseQueryResult,
} from './types'
import type {
  DefinedInitialDataOptions,
  UndefinedInitialDataOptions,
} from './queryOptions'

export function useQuery<
  TQueryFnData = unknown,
  TError = DefaultError,
  TData = TQueryFnData,
  TQueryKey extends QueryKey = QueryKey,
>(
  options: DefinedInitialDataOptions<TQueryFnData, TError, TData, TQueryKey>,
  queryClient?: QueryClient,
<<<<<<< HEAD
): DefinedUseQueryResult<NoInfer<TData>, TError>
=======
): DefinedUseQueryResult<TData, TError>
>>>>>>> 3b008e380491e6ba2d199016330fcd7fa128de4c

export function useQuery<
  TQueryFnData = unknown,
  TError = DefaultError,
  TData = TQueryFnData,
  TQueryKey extends QueryKey = QueryKey,
>(
  options: UndefinedInitialDataOptions<TQueryFnData, TError, TData, TQueryKey>,
  queryClient?: QueryClient,
<<<<<<< HEAD
): UseQueryResult<NoInfer<TData>, TError>
=======
): UseQueryResult<TData, TError>
>>>>>>> 3b008e380491e6ba2d199016330fcd7fa128de4c

export function useQuery<
  TQueryFnData = unknown,
  TError = DefaultError,
  TData = TQueryFnData,
  TQueryKey extends QueryKey = QueryKey,
>(
  options: UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,
  queryClient?: QueryClient,
<<<<<<< HEAD
): UseQueryResult<NoInfer<TData>, TError>
=======
): UseQueryResult<TData, TError>
>>>>>>> 3b008e380491e6ba2d199016330fcd7fa128de4c

export function useQuery(options: UseQueryOptions, queryClient?: QueryClient) {
  return useBaseQuery(options, QueryObserver, queryClient)
}
